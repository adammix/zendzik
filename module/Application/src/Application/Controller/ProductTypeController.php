<?phpnamespace Application\Controller;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use Application\Entity\ProductTypes;use Application\Entity\Domains;use Application\Entity\Categories;use Application\Entity\Attributes;	use Application\Entity\AttributesGroups;	use Application\Form\ProductTypeForm;class ProductTypeController extends AbstractActionController{	protected $_objectManager = null;	    public function indexAction()    {        $product_types = $this->getObjectManager()->getRepository('\Application\Entity\ProductTypes')->findAll();        //die(var_dump($product_types));        return new ViewModel(array('product_types' => $product_types));    }    public function addAction()    {    	$form = new ProductTypeForm();        if($this->request->isPost()){            $name = $this->getRequest()->getPost('name');            $attributes = $this->getRequest()->getPost('attributes');            $domains = $this->getRequest()->getPost('domains');            $is_category = $this->getRequest()->getPost('is_category');            $categories_json = $this->getRequest()->getPost('categories');            //$this->getServiceLocator()->get('log')->info($domains);            /**             * zapis do tablicy ProductType             */            $productType = new ProductTypes();            $productType->setName($name);            $productType->setIsCategory($is_category);            /**             * zapis do tablicy Domains             */            if(!empty($domains)){                $domains_string = '';                foreach($domains as $key => $value){                    if($key == 0){                        $domains_string .= ''.$value;                    }else{                        $domains_string .= ';'.$value;                    }                }                $productType->setDomains($domains_string);            }            $this->getObjectManager()->persist($productType);            $this->getObjectManager()->flush();            /**             * zapis do tablicy AttributesGroups             */            if(!empty($attributes)){                foreach($attributes as $key => $value){                    $attribute = $this->getObjectManager()->find('\Application\Entity\Attributes', $value);                    if(!empty($attribute)){                        $attributesGroups = new AttributesGroups();                        $attributesGroups->setIdAttributes($attribute)                            ->setIdProductTypes($productType);                        $this->getObjectManager()->persist($attributesGroups);                    }                }            }            /**             * zapis do tablicy Categories             */            if(!empty($categories_json)){                $categories = json_decode($categories_json);                //die(var_dump($categories));                $this->categories_iterator($categories[0], 0, $productType);            }            return $this->redirect()->toRoute('products-type', array());        }				/**		 * ATTRIBUTES		 */		$attributes = $this->getObjectManager()->getRepository('\Application\Entity\Attributes')->findAll();		$attr_options = array();		foreach ($attributes as $key => $value) {			$attr_id = '';			$attr_name = '';			$attr_id = $attributes[$key]->getId();			$attr_name = $attributes[$key]->getName();			$attr_desc = $attributes[$key]->getDescription();			$attr_name = $attr_name.' ('.$attr_desc.')';			$attr_options[$attr_id] = $attr_name;			//$this->getServiceLocator()->get('log')->info($attr_name);		}		$form->get('attributes')->setAttribute('options', $attr_options);				/**		 * DOMAINS		 */		$domains = $this->getObjectManager()->getRepository('\Application\Entity\Domains')->findAll();		$domain_options = array();		foreach ($domains as $key => $value) {			$domain_id = '';			$domain_name = '';			$domain_id = $domains[$key]->getId();			$domain_name = $domains[$key]->getName();						$domain_options[$domain_id] = $domain_name;			//$this->getServiceLocator()->get('log')->info($attr_name);		}		$form->get('domains')->setAttribute('options', $domain_options);        //$form->get('is_category')->setAttribute('options', $domain_options);		        return new ViewModel(array('form' => $form));    }    public function editAction()    {        $form = new ProductTypeForm();        if($this->request->isPost()){            $id = (int)$this->getRequest()->getPost('id');            $name = $this->getRequest()->getPost('name');            $post_attributes = $this->getRequest()->getPost('attributes');            $post_domains = $this->getRequest()->getPost('domains');            $is_category = $this->getRequest()->getPost('is_category');            $categories_json = $this->getRequest()->getPost('categories');            //$this->getServiceLocator()->get('log')->info($domains);            /**             *  zapis NAZWY             */            $product_type = $this->getObjectManager()->getRepository('\Application\Entity\ProductTypes')->findOneById($id);            $product_type->setName($name);            /**             * zapis ATRYBUTÃ“W             */            $attributes_groups = $this->getObjectManager()->getRepository('\Application\Entity\AttributesGroups')->findBy(array('idProductTypes' => $id));            foreach ($attributes_groups as $key => $value) {                $attribute = $attributes_groups[$key]->getIdAttributes()->getId();                $is_attribute_exist = array_search($attribute, $post_attributes);                if(isset($is_attribute_exist)){                    unset($post_attributes[$is_attribute_exist]);                }else{                    $this->getObjectManager()->remove($attributes_groups[$key]);                }            }            //$this->getServiceLocator()->get('log')->info($post_attributes);            foreach($post_attributes as $key => $value){                $attribute = $this->getObjectManager()->getRepository('\Application\Entity\Attributes')->findOneById($value);                if(!empty($attribute)){                    $attributesGroups = new AttributesGroups();                    $attributesGroups->setIdAttributes($attribute)                                     ->setIdProductTypes($product_type);                    $this->getObjectManager()->persist($attributesGroups);                }            }            /**             * zapis DOMEN             */            if(!empty($post_domains)){                $domains_string = '';                foreach($post_domains as $key => $value){                    $domains_string .= ''.$value.';';                }                $product_type->setDomains($domains_string);            }            $this->getObjectManager()->persist($product_type);            $this->getObjectManager()->flush();            /**             * zapis KATEGORII             */            $product_type->setIsCategory($is_category);            if(!empty($categories_json) && !empty($is_category)){                $old_categories = $this->get_categories_tree($product_type);                //die(var_dump($old_categories));                $categories = json_decode($categories_json);                $this->categories_iterator($categories[0], 0, $product_type, $old_categories);            }            die();            return $this->redirect()->toRoute('products-type', array());        }else{            /////////////////////////////////////            ///return form with present data////            ////////////////////////////////////            $id = (int)$this->getEvent()->getRouteMatch()->getParam('id');            $product_type = $this->getObjectManager()->getRepository('\Application\Entity\ProductTypes')->findOneById($id);            /**             *  NAME OF TYPE OF PRODUCT             */            $form->get('id')->setValue($product_type->getId());            $form->get('name')->setValue($product_type->getName());            /**             * ATTRIBUTES             */            $attributes_groups = $this->getObjectManager()->getRepository('\Application\Entity\AttributesGroups')->findBy(array('idProductTypes' => $id));            $atributes_active = array();            foreach ($attributes_groups as $key => $value) {                $atributes_active[] = $attributes_groups[$key]->getIdAttributes()->getId();            }            $attributes = $this->getObjectManager()->getRepository('\Application\Entity\Attributes')->findAll();            $attr_options = array();            foreach ($attributes as $key => $value) {                $attr_options[$attributes[$key]->getId()] = $attributes[$key]->getName().' ('.$attributes[$key]->getDescription().')';            }            $form->get('attributes')->setAttribute('options', $attr_options);            $form->get('attributes')->setValue($atributes_active);            /**             * DOMAINS             */            $domains_active = explode(";", $product_type->getDomains());            $domains = $this->getObjectManager()->getRepository('\Application\Entity\Domains')->findAll();            $domain_options = array();            foreach ($domains as $key => $value) {                $domain_options[$domains[$key]->getId()] = $domains[$key]->getName();            }            $form->get('domains')->setAttribute('options', $domain_options);            $form->get('domains')->setValue($domains_active);            /**             * IS_CATEGORY             */            $form->get('is_category')->setValue($product_type->getIsCategory());            /**             *  CATEGORIES TREE             */            $categories_tree = $this->get_categories_tree($product_type);            $categories_tree = json_encode($categories_tree);            //$this->getServiceLocator()->get('log')->info($categories_table);            $form->get('categories')->setValue($categories_tree);            return new ViewModel(array('form' => $form));        }    }    public function deleteAction()    {        $id = (int)$this->getEvent()->getRouteMatch()->getParam('id');        $product_type = $this->getObjectManager()->getRepository('\Application\Entity\ProductTypes')->findOneById($id);        if (!empty($product_type)) {            $product_attributes = $this->getObjectManager()->getRepository('\Application\Entity\AttributesGroups')->findBy(array('idProductTypes' => $id));            foreach($product_attributes as $item){                $this->getObjectManager()->remove($item);            }            if($product_type->getIsCategory()){                $categories = $this->getObjectManager()->getRepository('\Application\Entity\Categories')->findBy(array('idproducttypes' => $id));                foreach($categories as $item){                    $this->getObjectManager()->remove($item);                }            }            $this->getObjectManager()->remove($product_type);            $this->getObjectManager()->flush();        }        return $this->redirect()->toRoute('products-type', array());    }	protected function getObjectManager()    {        if (!$this->_objectManager) {            $this->_objectManager = $this->getServiceLocator()->get('Doctrine\ORM\EntityManager');        }        return $this->_objectManager;    }    protected function categories_iterator($category_node , $parent_id = 0, $productType, &$old_categories){        //$this->getServiceLocator()->get('log')->info($productType->getId());        //die(var_dump($productType));        $category = $this->getObjectManager()->getRepository('\Application\Entity\Categories')->findOneById(1000);        if(empty($category)){            $this->getServiceLocator()->get('log')->info('xxxxxxxxxxxx');        }else{            foreach($old_categories as $old_category){                $this->getServiceLocator()->get('log')->info($old_category['id']);            }            $category = new Categories();            if($category_node->id == '0'){                $category->setName($category_node->text)                    ->setParentid('0')                    ->setIdProductTypes($productType);            }else{                $category->setName($category_node->text)                    ->setParentid($parent_id)                    ->setIdProductTypes($productType);            }            $this->getObjectManager()->persist($category);            $this->getObjectManager()->flush();            if(!empty($category_node->children)){                foreach($category_node->children as $category_children){                    $this->categories_iterator($category_children , $category->getId(), $productType);                }            }        }    }    protected function get_categories_tree($productTypeId){        $categories = $this->getObjectManager()->getRepository('\Application\Entity\Categories')->findBy(array('idproducttypes' => $productTypeId->getId()));        $categories_table = array();        //$this->getServiceLocator()->get('log')->info($categories);        foreach($categories as $key => $value){            if( $value->getParentid() == 0){                $categories_table[] = (object) array( 'id' => $value->getId(),                    'parent' => '#',                    'text' => $value->getName(),                );            }else{                $categories_table[] = (object) array( 'id' => $value->getId(),                    'parent' => $value->getParentid(),                    'text' => $value->getName(),                );            }        }        return $categories_table;    }}